package ${plugin.packageName};
#* @vtlvariable name="plugin" type="perobobbot.server.plugin.template.PluginInfo" *#

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import jplugman.api.Requirement;
import jplugman.api.ServiceProvider;
import lombok.NonNull;
import perobobbot.access.AccessRule;
import perobobbot.command.CommandDefinition;
import perobobbot.extension.ExtensionFactoryBase;
import perobobbot.lang.Role;
import perobobbot.myplugin.command.ExtensionCommand;
import perobobbot.overlay.api.Overlay;
import perobobbot.plugin.ExtensionPlugin;

import java.time.Duration;

/**
 * This is the entry point of the plugin (at the jplugman level).
 * <p>
 * For jplugman, the plugin provides a service which in the case
 * of the bot, is an ExtensionPlugin (which might be confusing, sorry).
 * <p>
 * An ExtensionPlugin is a plugin for the Bot to add an extension to itself.
 */
public class JPlugin extends ExtensionFactoryBase<BotExtension> {

    public JPlugin() {
        super("My Bot Extension");
    }

    /**
     * @return the type of the ExtensionPlugin
     */
    @Override
    public @NonNull Class<?> getServiceClass() {
        return BotExtensionPlugin.class;
    }

    /**
     * @return the requirements of the extension
     */
    @Override
    public @NonNull ImmutableSet<Requirement<?>> getRequirements() {
        return ImmutableSet.of(Requirements.OVERLAY);
    }

    /**
     * @param extension          the extension to add to the bot
     * @param commandDefinitions the definition of the commands for the extension
     * @return return a plugin (at the bot level) that will be used to add the extension to the bot.
     */
    @Override
    protected @NonNull ExtensionPlugin createExtensionPlugin(@NonNull BotExtension extension,
                                                             @NonNull ImmutableList<CommandDefinition> commandDefinitions) {
        return new BotExtensionPlugin(extension, commandDefinitions);
    }

    /**
     * @param pluginLayer     the module layer used to load this plugin. You must use it to perform some service loading
     * @param serviceProvider the provider of services, only the required services returned by {@link #getRequirements()}
     *                        will be available
     * @return the extension that will be added to the bot
     */
    @Override
    protected @NonNull BotExtension createExtension(@NonNull ModuleLayer pluginLayer, @NonNull ServiceProvider serviceProvider) {
        return new BotExtension(serviceProvider.getAnyService(Overlay.class));
    }

    /**
     * Create the command that can be used to control the extension. The command are read from the platform chat
     *
     * @param extension       the extension to control
     * @param serviceProvider the service provider, only the required services returned by {@link #getRequirements()}
     *                        will be available
     * @param factory         a factory to ease the creation the commands
     * @return a list of command definitions
     */
    @Override
    protected @NonNull ImmutableList<CommandDefinition> createCommandDefinitions(@NonNull BotExtension extension,
                                                                                 @NonNull ServiceProvider serviceProvider,
                                                                                 CommandDefinition.@NonNull Factory factory) {
        final var accessRule = AccessRule.create(Role.THE_BOSS, Duration.ZERO);
        return ImmutableList.of(
                factory.create("myplugin {cmd}", accessRule, new ExtensionCommand(extension))
        );
    }

    @Override
    public @NonNull String getExtensionName() {
        return "My Bot Extension";
    }
}
